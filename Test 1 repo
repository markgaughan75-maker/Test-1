--- FILE: package.json ---
{
  "name": "test-1",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "13.5.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwindcss": "^3.3.3",
    "autoprefixer": "^10.4.15",
    "postcss": "^8.4.31",
    "stripe": "^12.0.0"
  },
  "devDependencies": {
    "typescript": "^5.2.2"
  }
}

--- FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

--- FILE: postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

--- FILE: tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

--- FILE: app/layout.tsx ---
import './globals.css';
import { ReactNode } from 'react';

export const metadata = {
  title: 'Lumely',
  description: 'AI Render Enhancement Platform',
};

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body className="bg-gray-50 text-gray-800">
        <header className="w-full bg-white shadow p-4 flex justify-between items-center">
          <h1 className="text-xl font-bold text-blue-600">Lumely</h1>
          <nav className="space-x-4">
            <a href="/" className="hover:underline">Dashboard</a>
            <a href="/pricing" className="hover:underline">Pricing</a>
          </nav>
        </header>
        <main className="max-w-5xl mx-auto p-6">{children}</main>
      </body>
    </html>
  );
}

--- FILE: app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: system-ui, sans-serif;
}

--- FILE: app/page.tsx ---
"use client";
import { useState } from "react";

export default function Dashboard() {
  const [file, setFile] = useState<File | null>(null);
  const [preview, setPreview] = useState<string | null>(null);
  const [result, setResult] = useState<string | null>(null);
  const [quality, setQuality] = useState("low");

  const handleUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const f = e.target.files?.[0];
    if (f) {
      setFile(f);
      setPreview(URL.createObjectURL(f));
    }
  };

  const handleSubmit = async () => {
    if (!file) return;
    // stubbed API call
    setResult(preview); // just echo preview for now
  };

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Dashboard</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow p-4">
          <h3 className="font-semibold mb-2">Upload Render</h3>
          <input type="file" onChange={handleUpload} />
          <div className="mt-4">
            <label className="mr-2">Quality:</label>
            <select
              value={quality}
              onChange={(e) => setQuality(e.target.value)}
              className="border rounded p-1"
            >
              <option value="low">Low (1 credit)</option>
              <option value="medium">Medium (2 credits)</option>
              <option value="high">High (4 credits)</option>
            </select>
          </div>
          <button
            onClick={handleSubmit}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Enhance
          </button>
        </div>
        <div className="bg-white rounded-xl shadow p-4">
          <h3 className="font-semibold mb-2">Preview</h3>
          <div className="flex space-x-4">
            {preview && (
              <div>
                <p className="text-sm text-gray-500 mb-1">Before</p>
                <img src={preview} className="w-40 rounded" />
              </div>
            )}
            {result && (
              <div>
                <p className="text-sm text-gray-500 mb-1">After</p>
                <img src={result} className="w-40 rounded" />
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

--- FILE: app/pricing/page.tsx ---
export default function Pricing() {
  return (
    <div>
      <h2 className="text-2xl font-bold mb-6">Pricing Plans</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {[
          { name: "Starter", price: "€20", credits: "60 credits" },
          { name: "Studio", price: "€35", credits: "180 credits" },
          { name: "Pro", price: "€60", credits: "500 credits" },
        ].map((tier) => (
          <div
            key={tier.name}
            className="bg-white rounded-xl shadow p-6 flex flex-col"
          >
            <h3 className="text-xl font-bold mb-2">{tier.name}</h3>
            <p className="text-2xl font-bold text-blue-600">{tier.price}</p>
            <p className="text-gray-600 mb-4">{tier.credits}</p>
            <button className="mt-auto px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
              Subscribe
            </button>
          </div>
        ))}
      </div>
    </div>
  );
}

--- FILE: pages/api/jobs/create.ts ---
import type { NextApiRequest, NextApiResponse } from "next";

// Stubbed API handler
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).end();

  // In production: deduct credits, call OpenAI + Replicate
  return res.status(200).json({ status: "ok", url: "/sample.jpg" });
}

--- FILE: pages/api/jobs/webhook.ts ---
import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Stubbed Replicate webhook
  res.status(200).json({ received: true });
}

--- FILE: pages/api/stripe/webhook.ts ---
import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Stubbed Stripe webhook
  res.status(200).json({ ok: true });
}

--- FILE: public/sample.jpg ---
(binary placeholder, add any jpg you want)

--- FILE: .env.example ---
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE=
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=
OPENAI_API_KEY=
REPLICATE_API_TOKEN=
UPSTASH_REDIS_REST_URL=
UPSTASH_REDIS_REST_TOKEN=
STARTER_PRICE_ID=
STUDIO_PRICE_ID=
PRO_PRICE_ID=
NEXT_PUBLIC_BASE_URL=http://localhost:3000

--- FILE: README.md ---
# Lumely (test-1)

AI Render Enhancement Platform (Starter Repo).

## Setup

1. Copy `.env.example` → `.env.local` and fill in API keys.
2. Install deps:
   ```bash
   npm install
   npm run dev
